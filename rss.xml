<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>NovaSky</title><description>Next-generation Open Vision and AI @ Berkeley Sky Computing Lab</description><link>https://novasky-ai.github.io/</link><language>en-US</language><item><title>Think Less, Achieve More: Cut Reasoning Costs by 50% Without Sacrificing Accuracy</title><link>https://novasky-ai.github.io/posts/reduce-overthinking/</link><guid isPermaLink="true">https://novasky-ai.github.io/posts/reduce-overthinking/</guid><description>We introduce Sky-T1-32B-Flash, our reasoning model that cuts generation length by up to 50% while maintaining accuracy.</description><pubDate>Thu, 23 Jan 2025 00:00:00 GMT</pubDate><content:encoded>**By: [Tyler Griggs](https://tyler-griggs.github.io/), [Shiyi Cao](https://shiyicao.com/), [Dacheng Li](https://dachengli1.github.io/), [Shu Liu](https://www.linkedin.com/in/slynl/), [Shishir Patil](https://shishirpatil.github.io/), [Matei Zaharia](https://people.eecs.berkeley.edu/~matei/), [Joey Gonzalez](https://people.eecs.berkeley.edu/~jegonzal/), [Ion Stoica](https://people.eecs.berkeley.edu/~istoica/) -- Jan 23, 2025**

We are excited to introduce **Sky-T1-32B-Flash**, our updated reasoning language model that significantly reduces overthinking, **slashing inference costs on challenging questions by up to 57%**. This enhancement decreases generation length while preserving accuracy across domains such as mathematics, coding, science, and general knowledge, and **requires only $275 for the complete training recipe** using 8xH100s according to Lambda Cloud pricing. To foster transparency and collaboration, we have open-sourced the full pipeline—from data generation and pre-processing to preference optimization and evaluation scripts—and openly provide the model weights and data.
 - [**Github**](https://github.com/NovaSky-AI/SkyThought): Code for data generation, response rewriting, preference optimization, and evaluations.
 - [**Dataset**](https://huggingface.co/datasets/NovaSky-AI/Sky-T1_preference_data_10k): 10K preference pairs 
 - [**HuggingFace**](https://huggingface.co/NovaSky-AI/Sky-T1-32B-Flash): Sky-T1-32B-Flash model weights

![img](https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/images/reduce-overthinking/headline-plot.png)
**Figure 1:** Our new model significantly reduces generated token lengths while maintaining strong performance on challenging benchmarks.

## Benefits of reducing overthinking
Reducing overthinking improves efficiency and scalability by reducing redundant or unnecessary token generation. This improvement not only greatly reduces inference costs for reasoning models, but also offers multiple downstream benefits. First, the accelerated response delivery provides a much higher-quality user experience. Further, with more efficient reasoning, test-time generation methods such as Best-of-N, Majority Vote, or Monte Carlo Tree Search can yield higher accuracy within fixed computational budgets. It also streamlines data generation in self-training pipelines, which are often bottlenecked by large-scale data generation runs.

## How to reduce overthinking?
Our approach to reduce overthinking builds on the self-training recipe proposed in [recent work](https://arxiv.org/abs/2412.21187) with important enhancements to improve accuracy in challenging benchmarks across multiple domains. A challenge of reducing overthinking is to prevent the model from *underthinking*, where the model proposes a final solution without sufficiently validating it. This challenge is especially highlighted in the most challenging benchmarks where extensive double-checking and backtracking are required. Ideally, the model learns to adjust the depth of its reasoning based on the complexity of the question.

Our training process involves three primary stages: data generation, response rewriting, and preference optimization. 

![img](https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/images/reduce-overthinking/recipe.png)

### Stage 1) Data Generation
We used Sky-T1-32B-Preview to generate responses to the 12K questions in the [PRM800K](https://huggingface.co/datasets/tasksource/PRM800K) dataset. For each question, we used a temperature of 1.0 and generated 8 responses to create a diversity of response lengths. We then formed preference pairs to contrast “verbose” vs. “concise” solutions. Specifically, from the generated responses, we picked the shortest correct response as the positive example and the longest correct response as the negative example. We discarded the rest of the generated responses, and discard any questions that did not produce at least two correct responses. We hypothesize that preference optimization over such pairs can encourage the model to reduce overthinking. 

Preference optimization with these pairs reduced generation lengths and mostly maintained accuracy on several benchmarks ([MATH500](https://huggingface.co/datasets/di-zhang-fdu/MATH500), [GPQA](https://huggingface.co/datasets/Idavidrein/gpqa), [MMLU](https://huggingface.co/datasets/TIGER-Lab/MMLU-Pro)), however, we observed accuracy degradation on challenging problems in coding ([LiveCodeBench](https://livecodebench.github.io/)-Medium and -Hard) and the most challenging math suites, [AIME24](https://huggingface.co/datasets/tasksource/PRM800K) and  MATH500 Level 5. These results suggest that the model was underthinking in cases requiring more complex reasoning. To address this, we used the initial dataset of 8 responses per question to add 1K preference pairs to our training data, where the negative example is the shortest *incorrect* response and the positive example is the shortest correct response that is longer than the negative example, ensuring the model retained its ability to engage in deeper reasoning when necessary. This new data mix brought the model back up to par with Sky-T1-32B-Preview on the most challenging math benchmarks.

&gt; **Recipe Enhancement #1:** Incorporate {short incorrect response, long correct response} into the preference pair dataset to encourage complex thinking for challenging problems.

Interestingly, preference optimization with this math-only dataset reduced generation length by &gt;25% in the *coding* domain while maintaining accuracy on LCB-Easy. However, we observed a drop in accuracy in the more challenging benchmarks LCB-Medium and -Hard, so we added 500 more preference pairs generated by Sky-T1-32B-Preview on the [TACO](https://huggingface.co/datasets/BAAI/TACO/tree/main) dataset. We again generated 8 responses with a temperature of 1.0 and created preference pairs with the shortest and longest correct responses, which elevated coding performance back to the level of Sky-T1-32B-Preview.

&gt; **Recipe Enhancement #2:** Incorporating a small number of coding preference pairs simultaneously boosts coding accuracy and further reduces coding generation lengths. 

Stage 1 required ~8 hours on 8xH100-80GB for a total of ~$190 according to Lambda Cloud pricing.

### Stage 2) Response Rewriting
We refined positive samples by removing unnecessary sub-solutions. The model’s reasoning sequences often include multiple proposed solutions each followed by double-checking transitions such as “Alternatively…,” “But wait…,” or “Let me reconsider…”. For easier questions, these transitions rarely lead to an altered answer but can extend the response length significantly. Using techniques inspired by [recent work](https://arxiv.org/abs/2412.21187), we use [Llama3.3-70B](https://huggingface.co/meta-llama/Llama-3.3-70B-Instruct) to separate the solutions within a response then rewrite the response to include only the first correct sub-solution (FCS) and one additional sub-solution (+1). This pruning approach removes most of the unnecessary sub-solutions, reducing the sequence length of positive samples, but includes a single additional sub-solution to maintain the model’s long chain-of-thought reasoning structure. 

Following [prior work](https://arxiv.org/abs/2412.21187), we also explored rewriting the response to include up to the first correct solution (FCS) or up to the second correct solution (FCS+Reflection), but found our FCS+1 approach to achieve lowest generation lengths while maintaining accuracy. For coding samples, we did not perform response rewriting. We could not apply our FCS+1 approach to coding because responses almost never propose multiple complete code blocks as solutions, though we believe there is opportunity to remove significant redundancy in coding responses. We have open-sourced the response rewriting pipeline to enable researchers to easily explore alternative methods. 

&gt; **Recipe Enhancement #3:** Rewriting positive preference math examples to maintain only the first correct solution and one additional solution (FCS+1) maintains accuracy (unlike FCS) and produces shorter generation lengths (relative to FCS+R). 

Stage 2 required ~1 hour on 8xH100-80GB for a total of ~$25 according to Lambda Cloud pricing.

### Stage 3) Preference Optimization
We employed [SimPO](https://arxiv.org/abs/2405.14734) for preference optimization. SimPO is closely related to [DPO](https://arxiv.org/abs/2305.18290), but incorporates a length-normalized implicit reward into the optimization approach, which leads to shorter sequence lengths relative to DPO. Further, SimPO eliminates the need for the reference model required by DPO, making preference optimization less compute-intensive and therefore cheaper. As an alternative to preference optimization, we also explored using only SFT with the shortest responses, but found sequence lengths were only marginally reduced (&lt;5%). In the [ablation results](#ablations), we include ablations for DPO using the same preference pairs as described in Stage (2) and for SFT using the shortest responses.

We start with Sky-T1-32B-Preview as our base model and train with SimPO for 1 epoch and a batch size of 96. We found SimPO results to be sensitive to hyperparameter settings and performed limited exploration within the following space: learning rate = {1e-7, 5e-7, 1e-6}, gamma = {0.3, 0.5, 1.0}, beta = {2.0, 2.5}. We achieved the best performance with a learning rate of 5e-7, gamma of 0.3, and beta of 2.0.  We use [Llama-Factory](https://github.com/hiyouga/LLaMA-Factory) to perform training.

Stage 3 required ~2.5 hours on 8xH100-80GB for a total of ~$60 according to Lambda Cloud pricing.


## Results
**Sky-T1-32B-Flash** maintains **Sky-T1-32B-Preview**’s accuracy across the suite of challenging benchmarks, and consistently reduces generation lengths by over 30%. Even on the most challengine problems, from AIME24 and LCB-Hard, Sky-T1-32B reduces sequence lengths by 37% and 57%, respectively. 

![img](https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/images/reduce-overthinking/results-table.png)

### Ablations
We report ablation results for alternative methods and recipes we explored. **LS** refers to using {Negative: **L**ongest correct example, Positive: **S**hortest correct example} preference pairs. **SILC** refers to using {Negative: **S**hort **I**ncorrect example, Positive: **L**ong **C**orrect example}.

![img](https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/images/reduce-overthinking/ablations-table.png)

## Acknowledgement
This work is done at [Berkeley Sky Computing Lab](https://sky.cs.berkeley.edu/) with generous compute support from [Anyscale](https://www.anyscale.com/) and [Lambda Labs](https://lambdalabs.com/service/gpu-cloud?srsltid=AfmBOop5FnmEFTkavVtdZDsLWvHWNg6peXtat-OXJ9MW5GMNsk756PE5).


## Citation
```bibtex
@misc{reduce_overthinking_2025,
  author       = {NovaSky Team},
  title        = {Think Less, Achieve More: Cut Reasoning Costs by 50% Without Sacrificing Accuracy},
  howpublished = {https://novasky-ai.github.io/posts/reduce-overthinking},
  note         = {Accessed: 2025-01-23},
  year         = {2025}
}</content:encoded></item><item><title>Sky-T1: Train your own O1 preview model within $450</title><link>https://novasky-ai.github.io/posts/sky-t1/</link><guid isPermaLink="true">https://novasky-ai.github.io/posts/sky-t1/</guid><description>We introduce Sky-T1-32B-Preview, our reasoning model that performs on par with o1-preview on popular reasoning and coding benchmarks.</description><pubDate>Fri, 10 Jan 2025 00:00:00 GMT</pubDate><content:encoded>We introduce Sky-T1-32B-Preview, our reasoning model that performs on par with o1-preview on popular reasoning and coding benchmarks. **Remarkably, Sky-T1-32B-Preview was trained for less than $450, demonstrating that it is possible to replicate high-level reasoning capabilities affordably and efficiently.** All [code](https://github.com/NovaSky-AI/SkyThought) is open-source. 

![img](https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/images/sky-t1/Sky-T1-pipeline.jpg)

## Overview
Models such as o1 and Gemini 2.0 flash thinking that excel in reasoning have shown to solve complex tasks by producing a long internal chain of thought, among other advancements. However, the technical details and model weights are un-accessible, presenting a barrier to the participation of the academic and open-source communities.

In response, a few notable efforts have emerged to train open-weight reasoning models in the math domain, such as [Still-2](https://arxiv.org/abs/2412.09413) and [Journey](https://arxiv.org/abs/2411.16489). Concurrently, we, the NovaSky team at UC Berkeley, have been exploring various techniques to evolve the reasoning capabilities of base and instruct-tuned models. In this work, we achieve competitive reasoning performance not just in math, but also in coding in the same model.

### Fully Open-source: Driving Progress Together
To ensure our work benefits the broader community, we are fully committed to open-source collaboration. We open-source all details (i.e., data, codes, model weights) to enable the community to replicate and improve on our results *easily*:
 - [**Infrastructure**](https://github.com/NovaSky-AI/SkyThought): to build the data, train, and evaluate the model in a single repository.
 - [**Data**](https://github.com/NovaSky-AI/SkyThought): 17K data used to train Sky-T1-32B-Preview.
 - [**Technical details**](https://novasky-ai.github.io/posts/sky-t1): Our technical [report](https://novasky-ai.github.io/posts/sky-t1/) with a [wandb log](https://api.wandb.ai/links/sky-posttraining-uc-berkeley/wjg3sybl).
 - [**Model weights**](https://huggingface.co/NovaSky-AI): Our 32B model weight.

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Model&lt;/th&gt;
      &lt;th style=&quot;background-color: #bfbfbf;&quot;&gt;&lt;div align=&quot;center&quot;&gt;Sky-T1-32B-Preview&lt;/div&gt;&lt;/th&gt;
      &lt;th&gt;&lt;div align=&quot;center&quot;&gt;STILL-2&lt;/div&gt;&lt;/th&gt;
      &lt;th&gt;&lt;div align=&quot;center&quot;&gt;Journey&lt;/div&gt;&lt;/th&gt;
      &lt;th&gt;&lt;div align=&quot;center&quot;&gt;QwQ&lt;/div&gt;&lt;/th&gt;
      &lt;th&gt;&lt;div align=&quot;center&quot;&gt;o1&lt;/div&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Data&lt;/td&gt;
      &lt;td style=&quot;background-color: #f2f2f2;&quot;&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Code&lt;/td&gt;
      &lt;td style=&quot;background-color: #f2f2f2;&quot;&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Report&lt;/td&gt;
      &lt;td style=&quot;background-color: #f2f2f2;&quot;&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Math Domain&lt;/td&gt;
      &lt;td style=&quot;background-color: #f2f2f2;&quot;&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Coding Domain&lt;/td&gt;
      &lt;td style=&quot;background-color: #f2f2f2;&quot;&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Model Weights&lt;/td&gt;
      &lt;td style=&quot;background-color: #f2f2f2;&quot;&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;✅&lt;/div&gt;&lt;/td&gt;
      &lt;td&gt;&lt;div align=&quot;center&quot;&gt;❌&lt;/div&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

By sharing all these resources, we aim to empower the academic and open-source communities to build on our work, explore new possibilities, and push the boundaries of reasoning model development.

## Recipes
### Data Curation Process
To generate our training data we use QwQ-32B-Preview, an open-source model with reasoning capabilities comparable to o1-preview. We curate the data mixture  (see later section) to cover diverse domains that require reasoning, and a reject sampling procedure to improve the data quality. We then rewrite QwQ traces with GPT-4o-mini into a well-formatted version, inspired by [Still-2](https://arxiv.org/abs/2412.09413), to improve data quality and ease parsing. We particularly find the ease of parsing advantageous for reasoning models - they are trained to respond in a particular format, where results are often hard to parse. For instance, on the APPs dataset, without reformatting, we can only assume that the code is written in the last code block, where QwQ only achieves ~25% accuracy. However, sometimes code can be written in the middle, where after reformatting, the accuracy is boosted to higher than 90%.

**Rejection Sampling:** We discard QwQ samples if they are incorrect according to the solutions provided in datasets. For Math problems, we do exact matching with the ground truth solutions. For coding problems, we execute the unit tests provided in datasets. Our final data contains 5k coding data from APPs and TACO, and 10k math data from AIME, MATH, and Olympiads subsets of the NuminaMATH dataset. In addition, we maintain 1k science and puzzle data from STILL-2.

### Training
We use our training data to fine tune Qwen2.5-32B-Instruct, an open source model without reasoning capabilities. The model is trained with 3 epochs, learning rate 1e-5 and batch size 96. The model training finishes in 19 hours on 8 H100 with DeepSpeed Zero-3 offload (~ $450 according to Lambda Cloud pricing). We use [Llama-Factory](https://github.com/hiyouga/LLaMA-Factory) to perform training.

### Evaluation and Results
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th style=&quot;background-color: #bfbfbf;&quot;&gt;Sky-T1-32B-Preview&lt;/th&gt;
      &lt;th&gt;Qwen-2.5-32B-Instruct&lt;/th&gt;
      &lt;th&gt;QwQ&lt;/th&gt;
      &lt;th&gt;o1-preview&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Math500&lt;/td&gt;
      &lt;td style=&quot;background-color: #F2F2F2;&quot;&gt;82.4&lt;/td&gt;
      &lt;td&gt;76.2&lt;/td&gt;
      &lt;td&gt;85.4&lt;/td&gt;
      &lt;td&gt;81.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AIME2024&lt;/td&gt;
      &lt;td style=&quot;background-color: #F2F2F2;&quot;&gt;43.3&lt;/td&gt;
      &lt;td&gt;16.7&lt;/td&gt;
      &lt;td&gt;50.0&lt;/td&gt;
      &lt;td&gt;40.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LiveCodeBench-Easy&lt;/td&gt;
      &lt;td style=&quot;background-color: #F2F2F2;&quot;&gt;86.3&lt;/td&gt;
      &lt;td&gt;84.6&lt;/td&gt;
      &lt;td&gt;90.7&lt;/td&gt;
      &lt;td&gt;92.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LiveCodeBench-Medium&lt;/td&gt;
      &lt;td style=&quot;background-color: #F2F2F2;&quot;&gt;56.8&lt;/td&gt;
      &lt;td&gt;40.8&lt;/td&gt;
      &lt;td&gt;56.3&lt;/td&gt;
      &lt;td&gt;54.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LiveCodeBench-Hard&lt;/td&gt;
      &lt;td style=&quot;background-color: #F2F2F2;&quot;&gt;17.9&lt;/td&gt;
      &lt;td&gt;9.8&lt;/td&gt;
      &lt;td&gt;17.1&lt;/td&gt;
      &lt;td&gt;16.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GPQA-Diamond&lt;/td&gt;
      &lt;td style=&quot;background-color: #F2F2F2;&quot;&gt;56.8&lt;/td&gt;
      &lt;td&gt;45.5&lt;/td&gt;
      &lt;td&gt;52.5&lt;/td&gt;
      &lt;td&gt;75.2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


## Other findings
**Model size matters.** We initially experimented with training on smaller models (7B and 14B) but observed only modest improvements. For example, training Qwen2.5-14B-Coder-Instruct on the APPs dataset resulted in a slight performance increase on LiveCodeBench from 42.6% to 46.3%. However, upon manually inspecting outputs from smaller models (those smaller than 32B), we found that they frequently generated repetitive content, limiting their effectiveness.


**Data mixture matters.** We initially trained a 32B model using 3–4K math problems from the Numina dataset (provided by STILL-2), achieving a significant improvement in AIME24 accuracy from 16.7% to 43.3%. However, when we incorporated coding data generated from the APPs dataset into the training process, AIME24 accuracy dropped to 36.7%. We hypothesize that this decline is due to the distinct reasoning approaches required for math and coding tasks.

Reasoning in coding often involves additional logical steps, such as simulating test inputs or internally executing generated code, whereas reasoning for math problems tends to be more direct and structured. To address these differences, we enriched the training data with challenging math problems from the NuminaMath dataset and complex coding tasks from the TACO dataset. This balanced data mixture enabled the model to excel in both domains, restoring 43.3% accuracy on AIME24 while also improving its coding capabilities.

## Future work
Sky-T1-32B-Preview marks the start of our journey to develop open-sourced models with advanced reasoning capabilities. Moving forward, we will focus on developing more efficient models that maintain strong reasoning performance and exploring advanced techniques that further enhance the models’ efficiency and accuracy at test time. Stay tuned as we make progress on these exciting initiatives.


## Acknowledgement
This work is done at [Berkeley Sky Computing Lab](https://sky.cs.berkeley.edu/), with the amazing compute support from [Lambda Labs](https://lambdalabs.com/service/gpu-cloud?srsltid=AfmBOop5FnmEFTkavVtdZDsLWvHWNg6peXtat-OXJ9MW5GMNsk756PE5) and [Anyscale](https://www.anyscale.com/). We would like to express our gratitude for the valuable academic feedback and support from the [Still-2 Team](https://arxiv.org/pdf/2412.09413), and Junyang Lin from the [Qwen Team](https://qwenlm.github.io/).

## Citation
```bibtex
@misc{sky_t1_2025,
  author       = {NovaSky Team},
  title        = {Sky-T1: Train your own O1 preview model within $450},
  howpublished = {https://novasky-ai.github.io/posts/sky-t1},
  note         = {Accessed: 2025-01-09},
  year         = {2025}
}</content:encoded></item><item><title>About Us</title><link>https://novasky-ai.github.io/posts/about-us/</link><guid isPermaLink="true">https://novasky-ai.github.io/posts/about-us/</guid><description>About NovaSky</description><pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate><content:encoded>NovaSky (Next-generation Open Vision and AI) is a collaborative initiative led by students and advisors at UC Berkeley’s Sky Computing Lab. We aim to build the next-generation AI models that are SoTA, open-source and affordable for everyone. 

### Team

&lt;table style=&quot;table-layout: fixed; width: 100%; border-collapse: collapse;&quot;&gt;
  &lt;tr&gt;
    &lt;td style=&quot;width: 25%; text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
      &lt;img 
        src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/dacheng-profile.jpg&quot; 
        width=&quot;100&quot; 
        style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot; 
      /&gt;&lt;br&gt;
      &lt;strong&gt;&lt;a href=&quot;https://dachengli1.github.io/&quot;&gt;Dacheng Li&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
      &lt;em&gt;Student Lead&lt;/em&gt;
    &lt;/td&gt;
    &lt;td style=&quot;width: 25%; text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
      &lt;img 
        src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/9026-profile.jpg&quot; 
        width=&quot;100&quot; 
        style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot; 
      /&gt;&lt;br&gt;
      &lt;strong&gt;&lt;a href=&quot;https://shiyicao.com&quot;&gt;Shiyi Cao&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
      &lt;em&gt;Student Lead&lt;/em&gt;
    &lt;/td&gt;
    &lt;td style=&quot;width: 25%; text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
      &lt;img
        src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/shu-profile.jpg&quot;
        width=&quot;100&quot;
        style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot;
      /&gt;&lt;br&gt;
      &lt;strong&gt;&lt;a href=&quot;https://www.linkedin.com/in/slynl/&quot;&gt;Shu Liu&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
      &lt;em&gt;Student Lead&lt;/em&gt;
    &lt;/td&gt;
    &lt;td style=&quot;width: 25%; text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
      &lt;img
        src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/tyler-profile.jpg&quot;
        width=&quot;100&quot;
        style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot;
      /&gt;&lt;br&gt;
      &lt;strong&gt;&lt;a href=&quot;https://tyler-griggs.github.io/&quot;&gt;Tyler Griggs&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
      &lt;em&gt;Student Lead&lt;/em&gt;
    &lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td style=&quot;text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
      &lt;img
        src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/simon-profile.jpg&quot;
        width=&quot;100&quot;
        style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot;
      /&gt;&lt;br&gt;
      &lt;strong&gt;&lt;a href=&quot;https://github.com/simon-mo&quot;&gt;Simon Mo&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
      &lt;em&gt;Student&lt;/em&gt;
    &lt;/td&gt;
    &lt;td style=&quot;text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
      &lt;img
        src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/shishir-profile.jpg&quot;
        width=&quot;100&quot;
        style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot;
      /&gt;&lt;br&gt;
      &lt;strong&gt;&lt;a href=&quot;https://shishirpatil.github.io/&quot;&gt;Shishir G. Patil&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
      &lt;em&gt;Advisor&lt;/em&gt;
    &lt;/td&gt;
    &lt;td style=&quot;text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
      &lt;img
        src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/matei-profile.jpg&quot;
        width=&quot;100&quot;
        style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot;
      /&gt;&lt;br&gt;
      &lt;strong&gt;&lt;a href=&quot;https://people.eecs.berkeley.edu/~matei/&quot;&gt;Matei Zaharia&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
      &lt;em&gt;Advisor&lt;/em&gt;
    &lt;/td&gt;
    &lt;td style=&quot;text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
      &lt;img
        src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/joey-profile.jpg&quot;
        width=&quot;100&quot;
        style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot;
      /&gt;&lt;br&gt;
      &lt;strong&gt;&lt;a href=&quot;https://people.eecs.berkeley.edu/~jegonzal/&quot;&gt;Joseph E. Gonzalez&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
      &lt;em&gt;Advisor&lt;/em&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
  &lt;td style=&quot;text-align: center; vertical-align: middle; height: 150px;&quot;&gt;
    &lt;img
      src=&quot;https://raw.githubusercontent.com/NovaSky-AI/novasky-ai.github.io/main/assets/about-us/ion-profile.jpg&quot;
      width=&quot;100&quot;
      style=&quot;display: block; margin: 0 auto; border-radius:50%;&quot;
    /&gt;&lt;br&gt;
    &lt;strong&gt;&lt;a href=&quot;https://people.eecs.berkeley.edu/~istoica/&quot;&gt;Ion Stoica&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
    &lt;em&gt;Advisor&lt;/em&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;






### Acknowledgement
Members are funded by the [Berkeley Sky Computing Lab](https://sky.cs.berkeley.edu/). The compute resources are also generously supported by [Lambda Labs](https://lambdalabs.com/) and [Anyscale](https://www.anyscale.com/).

### Contact
X: [@NovaSkyAI](https://x.com/NovaSkyAI)

Email: novasky.berkeley@gmail.com

Discord: [NovaSky @ Berkeley](https://discord.com/invite/RBAjeWSA)

Github: [SkyThought](https://github.com/NovaSky-AI/SkyThought)</content:encoded></item></channel></rss>